using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Generation.SourceGenerator
{
    [Generator]
    public class MyPartialGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var classDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: (s, _) => s is ClassDeclarationSyntax,
                    transform: (ctx, _) => (ClassDeclarationSyntax)ctx.Node)
                .Where(cls => cls.AttributeLists
                    .SelectMany(a => a.Attributes)
                    .Any(attr => attr.Name.ToString().Contains("TestPartial")));

            context.RegisterSourceOutput(classDeclarations, (spc, classDecl) =>
            {
                var ns = GetNamespace(classDecl);
                var className = classDecl.Identifier.Text;
                var source = $@"// <auto-generated/>
using System;
namespace {ns}
{{
    public partial class {className}
    {{
        public void GeneratedMethod() => Console.WriteLine(""Generated from TestPartial!"");
    }}
}}";
                spc.AddSource($"{className}.TestPartial.g.cs", SourceText.From(source, Encoding.UTF8));
            });
        }

        private static string GetNamespace(ClassDeclarationSyntax classDecl)
        {
            SyntaxNode? parent = classDecl.Parent;
            while (parent != null && parent is not NamespaceDeclarationSyntax && parent is not FileScopedNamespaceDeclarationSyntax)
            {
                parent = parent.Parent;
            }
            if (parent is BaseNamespaceDeclarationSyntax ns)
                return ns.Name.ToString();
            return "";
        }
    }
}
